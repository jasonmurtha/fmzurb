// text underline transition
@mixin underline-transition($color: $white, $width: 1px) {
  transition: border-bottom-color 0.25s ease 0s;
  border-bottom: $width solid rgba($color, 0);
  &:hover,
  &:focus  {
    border-bottom: $width solid rgba($color, 0.65);
  }
}
// desktop dropdown items from ribbon and corp nav
@mixin nav-submenu-list($padding: $menu-item-padding) {
  background: $white;
  box-shadow: 0 0 5px 0 rgba(0,0,0,0.37);
  & > li > a { 
    padding: $padding;     
    color: $medium-gray;  
    text-transform: initial; 
    font-weight: $global-weight-light;
    border-bottom-width: 0; 
    transition: background-color 0.2s ease 0s, color 0.15s ease 0s;
  }
  & > li:hover > a, 
  & a:focus { 
    background: $fm-yellow;
    color: $white;
  } 
}
// desktop hover states for parent of dropdowns
@mixin nav-submenu-parent-hover(){
  color: $fm-orange;
  background: $white;
  border-bottom-color: $white;
  box-shadow: 0 -5px 5px 0 rgba(0,0,0,0.37);
  transition: color 0.15s ease 0s;
}

// link style for primary and secondary nav but not ribbon
@mixin nav-desktop-link(){  
  color: $fm-gray;
  transition: color 0.25s ease 0s, border-bottom-color 0.25s ease 0s;   
  &:hover,
  &:focus,
  &.active  {
    color: $fm-green;
    border-bottom-color: $fm-green;              
  }
}
@mixin list-divided($color: $light-gray){  
  li + li {
    border-top: 1px solid $color; 
  }  
  li { 
    padding: $global-padding/2 0;
    &:last-child { 
      padding-bottom: 0;
    }
  }
  
}
// anchors that aren't buttons, when used over dark backgrounds (modals, rotators, call outs, etc.)
@mixin anchor-on-dark($decoration: underline){
  &:not([class]) { 
    color: currentColor;
    position: relative;
    text-decoration: $decoration;
    &::after {
      content: "";
      position: absolute;
      left: 0; 
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba($white, 0);
      transition: background 0.3s ease 0s;      
    }
    &:hover::after,
    &:focus::after  {
      background: rgba($white, 0.2);
    }
    &:active::after  {
      background: rgba($white, 0.35);
      transition: none;
    }
  }  
}
// mixin to add rss feed icon to links in a list
@mixin rss-list($color: $white) {
  position: relative;
  &::before {
    content: " ";
    display: inline-block;
    width: 1em;
    height: 1em;
    margin-right: 0.375em;
    position: relative;
    bottom: -0.1em;
    background: transparent icon(rss-white, $color, 1rem, 1rem, 0, 0, 500, 460) no-repeat center center;
  } 
}
// staggered mosiac full pattern used below secondary nav/hover and footer:
@mixin mosaic-fill(
  $a: $mosaic-first, 
  $b: $mosaic-last, 
  $direction: to right
  ) {
  background: linear-gradient($direction, 
    color-shift($a, $b, 12, 2) 0%, 
    color-shift($a, $b, 12, 1) 17%, 
    color-shift($a, $b, 12, 4) 17%, 
    color-shift($a, $b, 12, 3) 33%, 
    color-shift($a, $b, 12, 6) 33%, 
    color-shift($a, $b, 12, 5) 50%, 
    color-shift($a, $b, 12, 8) 50%, 
    color-shift($a, $b, 12, 7) 67%, 
    color-shift($a, $b, 12, 10) 67%,  
    color-shift($a, $b, 12, 9) 83%, 
    color-shift($a, $b, 12, 12) 83%,  
    color-shift($a, $b, 12, 11) 100%
    );
}

// calculate color differences from beginning and ending color acorss number of steps, and return color at particular step
// just pass a start color/end color, number of steps from one to the other, and the current step to get the color.
@function color-shift($a, $b, $steps, $step) {
  @if $step == 1 or $steps < 2 { 
    @return $a;
  }
  @else if $step >= $steps {
    @return $b;
  }
  @else {  
    $shift: $step / $steps;
    $sat: saturation($a) - saturation($b);
    $lig: lightness($a) -  lightness($b);
    $hue: hue($a) - hue($b);
    @if $hue > 180 {
      $hue: $hue - 360; 
    }  
    @else if $hue <= -180 {
      $hue: $hue + 360;      
    }
    $hue2: adjust-hue($a, -$hue * $shift);
    $sat2: if($sat > 0, desaturate($hue2, abs($sat) * $shift), saturate($hue2, abs($sat) * $shift));
    $lig2:  if($lig > 0, darken($sat2, abs($lig) * $shift), lighten($sat2, abs($lig) * $shift));
    @return $lig2;
  }
}
   
  